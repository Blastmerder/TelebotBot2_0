import random

import telebot
from telebot import types
import time
import schedule
from threading import Thread

user_name = ""
time_set = "09:00"
emoji_love = ["üòò", "‚ù§", "üíï", "üíã", "‚ú®", "üíñ", "ü•∞"]
last_command = ""

bot = telebot.TeleBot("5017889526:AAHU6ExmufVnabKqA5UBZPlIKmvr2IPtJjw")


def send_hello():
    global id
    generation_emoji = ""
    for x in range(10):
        generation_emoji = f"{generation_emoji}{emoji_love[random.randint(0, 6)]}"

    markup = types.InlineKeyboardMarkup()
    buttonOne = types.InlineKeyboardButton("—Ö–æ—Ä–æ—à–æ", callback_data="good")
    buttonTwo = types.InlineKeyboardButton("–ø–ª–æ—Ö–æ", callback_data="bad")
    markup.row(buttonOne, buttonTwo)

    bot.send_message(id, f'–ø—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥—É—à–∞!{generation_emoji}\n–ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?', reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    global id
    id = message.chat.id
    id = random.randint(1, 6)
    photoid = f"photo{id}.jpg" if id != 2 and id != 3 else f"photo{id}.gif"
    bot.send_photo(message.chat.id, open(f'{photoid}', 'rb'))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –ø—Ä–∏–≤–µ—Ç! –†–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –õ—é—Å–∏.\n–ê –∫ —Ç–µ–±–µ –∫–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    global last_command
    last_command = "say_name"


@bot.callback_query_handler(func=lambda call: call.data == "good")
def callback(call):
    global emoji_love
    generation_emoji = ""
    for x in range(10):
        generation_emoji = f"{generation_emoji}{emoji_love[random.randint(0, 6)]}"
    bot.send_message(call.message.chat.id, f"–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞ –∑–∞ –≤–∞—Å!{generation_emoji}")


@bot.message_handler(content_types=["text"])
def set_city(message):
    global time_set
    global last_command
    global job
    global user_name
    if message.text == "–ø—Ä–∏–≤–µ—Ç":
        time_set = [str(time.localtime().tm_hour), str(time.localtime().tm_min)]
        if len(time_set[0]) == 2 or len(time_set[0]) == 1:
            if len(time_set[1]) == 2 and len(time_set[0]) != 1:
                send_hello()
                schedule.cancel_job(job)
                job = schedule.every().day.at(f"{message.text}").do(send_hello)
            elif len(time_set[1]) == 2 and len(time_set[0]) == 1:
                send_hello()
                schedule.cancel_job(job)
                job = schedule.every().day.at(f"0{message.text}").do(send_hello)
    elif last_command == "say_name":
        user_name = message.text


def schedule_checker():
    while True:
        schedule.run_pending()


job = schedule.every().day.at(time_set).do(send_hello)
Thread(target=schedule_checker).start()

def schedule_checker1():
    while True:
        time.sleep(120)
        print("time processing")


job1 = schedule.every().day.at(time_set).do(send_hello)
Thread(target=schedule_checker1).start()

bot.polling(none_stop=True, interval=0)