import random
import telebot
from telebot import types
import time
import schedule
from threading import Thread

user_name = ""
time_set = "09:00"
emoji_love = ["üòò", "‚ù§", "üíï", "üíã", "‚ú®", "üíñ", "ü•∞"]
cry_emoji = ["üò∞", "üò≠", "üò•", "üò´", "ü•∫"]
last_command = ""

bot = telebot.TeleBot("5102757220:AAGUZy8_esTuD0HrnE666Pd_p2vSTtC5Kk0")


def send_hello(idDef=None):
    if idDef is None:
        global id
    else:
        id = idDef

    generation_emoji = ""
    for x in range(10):
        generation_emoji = f"{generation_emoji}{emoji_love[random.randint(0, 6)]}"

    markup = types.InlineKeyboardMarkup()
    buttonOne = types.InlineKeyboardButton("—Ö–æ—Ä–æ—à–æ", callback_data="good")
    buttonTwo = types.InlineKeyboardButton("–ø–ª–æ—Ö–æ", callback_data="bad")
    markup.row(buttonOne, buttonTwo)

    bot.send_message(id, f'–ø—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥—É—à–∞!{generation_emoji}\n–ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?', reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    global id
    global emoji_love
    generation_emoji = ""
    for x in range(10):
        generation_emoji = f"{generation_emoji}{emoji_love[random.randint(0, 6)]}"
    id = message.chat.id
    pid = random.randint(1, 6)
    photoid = f"photo{pid}.jpg" if pid != 2 and pid != 3 else f"photo{pid}.gif"
    bot.send_photo(message.chat.id, open(f'{photoid}', 'rb'))
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, –ø—Ä–∏–≤–µ—Ç! {generation_emoji}\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –õ—é—Å–∏.\n–ê –∫ —Ç–µ–±–µ –∫–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    global last_command
    last_command = "say_name"


@bot.message_handler(commands=['–ø—Ä–∏–≤–µ—Ç'])
def start(message):
    send_hello(message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == "good")
def callback(call):
    global emoji_love
    generation_emoji = ""
    for x in range(10):
        generation_emoji = f"{generation_emoji}{emoji_love[random.randint(0, 6)]}"

    markup = types.InlineKeyboardMarkup()
    buttonOne = types.InlineKeyboardButton("–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç", callback_data="SayAnegdot")
    buttonTwo = types.InlineKeyboardButton("–≤–∫–ª—é—á–∏ –º—É–∑—ã–∫—É", callback_data="song")
    buttonTree = types.InlineKeyboardButton("–Ω–∏—á–µ–≥–æ –Ω–µ–Ω–∞–¥–æ", callback_data="Don't")
    markup.row(buttonOne, buttonTwo, buttonTree)

    bot.send_message(call.message.chat.id, f"–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞ –∑–∞ –≤–∞—Å!{generation_emoji}\n–•–æ—Ç–∏—Ç–µ —è —Ä–∞—Å—Å–∫–∞–∂—É –∞–Ω–µ–∫–¥–æ—Ç?\n–ò–ª–∏ –º—É–∑—ã–∫—É –≤–∫–ª—é—á—É!", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "SayAnegdot")
def callback(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    anegdot = open("anigdot.txt", "r", encoding="UTF-8")
    a = str(anegdot.read()).split("\n")
    ra = (a[random.randint(0, 9)]).replace('/', f'\n')
    bot.send_message(call.message.chat.id, f"{ra}")


@bot.callback_query_handler(func=lambda call: call.data == "song")
def callback(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    buttonOne = types.InlineKeyboardButton("–ò—Å–ø–∞–Ω—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞", callback_data="–∏—Å–ø–∞–Ω—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞")
    buttonTwo = types.InlineKeyboardButton("–∫–ª–∞—Å—Å–∏–∫–∞", callback_data="–∫–ª–∞—Å–∏–∫–∞")
    buttonTree = types.InlineKeyboardButton("—Ä–æ–∫", callback_data="—Ä–æ–∫")
    markup.row(buttonOne, buttonTwo, buttonTree)

    bot.send_message(call.message.chat.id,
                     f"–í—ã–±–µ—Ä–µ—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É.",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "—Ä–æ–∫")
def callback(call):
    global cry_emoji
    generation_emoji = ""
    for x in range(10):
        generation_emoji = f"{generation_emoji}{cry_emoji[random.randint(0, 4)]}"

    markup = types.InlineKeyboardMarkup()
    buttonOne = types.InlineKeyboardButton("Rammstein", callback_data="Rammstein")
    markup.row(buttonOne)

    bot.send_message(call.message.chat.id,
                     f"–£ –º–µ–Ω—è –µ—Å—Ç—å –ø–æ–∫–∞-—á—Ç–æ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –∏–∑ —Ä–æ–∫–∞...{generation_emoji}",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "Rammstein")
def callback(call):
    anegdot = open("Rammstein.txt", "r", encoding="UTF-8")
    a = str(anegdot.read()).split("\n")
    audi = f"{a[random.randint(0, 20)]}"
    audio = open(rf'{audi}', 'rb')
    bot.send_audio(call.message.chat.id, audio)
    audio.close()


@bot.callback_query_handler(func=lambda call: call.data == "–∏—Å–ø–∞–Ω—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞")
def callback(call):
    anegdot = open("–ò—Å–ø–∞–Ω—Å–∫–∞—è_–≥–∏—Ç–∞—Ä–∞.txt", "r", encoding="UTF-8")
    a = str(anegdot.read()).split("\n")
    print(a)
    audi = f"{a[random.randint(0, 16)]}"
    audio = open(rf'{audi}', 'rb')
    bot.send_audio(call.message.chat.id, audio)
    audio.close()


@bot.callback_query_handler(func=lambda call: call.data == "–∫–ª–∞—Å–∏–∫–∞")
def callback(call):
    anegdot = open("–ö–ª–∞—Å–∏–∫–∞.txt", "r", encoding="UTF-8")
    a = str(anegdot.read()).split("\n")
    audi = f"{a[random.randint(0, 18)]}"
    audio = open(rf'{audi}', 'rb')
    bot.send_audio(call.message.chat.id, audio)
    audio.close()


@bot.callback_query_handler(func=lambda call: call.data == "bad")
def callback(call):
    markup = types.InlineKeyboardMarkup()
    buttonOne = types.InlineKeyboardButton("–¥–∞", callback_data="angry")
    buttonTwo = types.InlineKeyboardButton("–Ω–µ—Ç", callback_data="notLeg")
    markup.row(buttonOne, buttonTwo)

    bot.send_message(call.message.chat.id, f"–í–∞—Å –æ–±–∏–¥–µ–ª–∏?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "notLag")
def callback(call):
    bot.send_message(call.message.chat.id, f"–°–∫–µ–º –Ω–µ –±—ã–≤–∞–µ—Ç...")


@bot.callback_query_handler(func=lambda call: call.data == "angry")
def callback(call):
    markup = types.InlineKeyboardMarkup()
    buttonOne = types.InlineKeyboardButton("–¥–∞", callback_data="angry2")
    buttonTwo = types.InlineKeyboardButton("–Ω–µ—Ç", callback_data="not")
    markup.row(buttonOne, buttonTwo)

    bot.send_message(call.message.chat.id, f"–†–∞–∑—Ä–µ—à–∏—Ç–µ —è –ø—Ä–æ–∫–ª—è–Ω—É –≤–∞—à–µ–≥–æ –æ–±–∏—Ç—á–∏–∫–∞? üòàüòàüòàüòà", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "not")
def callback(call):
    bot.send_message(call.message.chat.id, "–•–æ—Ä–æ—à–æ, –ø—É—Å—Ç—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑–Ω–∞–∫–∞–∑–∞–Ω–Ω—ã–º.")


@bot.callback_query_handler(func=lambda call: call.data == "angry2")
def callback(call):
    bot.send_message(call.message.chat.id, "–ü—Ä–æ–∫–ª–∏–Ω–∞—é –≤–∞—à–µ–≥–æ –æ–±–∏–¥—á–∏–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    time.sleep(5)
    bot.send_message(call.message.chat.id, "–Ø –Ω–∞–≤–µ–ª–∞ –ø–æ—Ä—á—É –Ω–∞ –æ–±–∏–¥—á–∏–∫–∞.\n–î–∞ —Å–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ!!!")


@bot.message_handler(content_types=["text"])
def set_city(message):
    global time_set
    global last_command
    global job
    global user_name
    if message.text == "–ø—Ä–∏–≤–µ—Ç":
        send_hello(message.chat.id)
    elif last_command == "say_name":
        user_name = message.text
        last_command = ""
        global emoji_love
        generation_emoji = ""
        for x in range(10):
            generation_emoji = f"{generation_emoji}{emoji_love[random.randint(0, 6)]}"
        bot.send_message(message.chat.id, f"–†–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É {user_name}! {generation_emoji}")


def schedule_checker():
    while True:
        schedule.run_pending()


job = schedule.every().day.at(time_set).do(send_hello)
Thread(target=schedule_checker).start()


def schedule_checker1():
    while True:
        time.sleep(120)
        print("time processing")


job1 = schedule.every().day.at(time_set).do(send_hello)
Thread(target=schedule_checker1).start()

bot.polling(none_stop=True, interval=0)